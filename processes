source $(_decompose-project-root)/.decompose/environment/lib/common/processes
source $(_decompose-project-root)/.decompose/environment/lib/docker/processes

DECOMPOSE_PROCESSES=( 'build' 'verify-nagios-config' 'up' 'stop' 'restart-nagios'
  'cron' 'rebuild'
  "${DECOMPOSE_COMMON_PROCESSES[@]}" "${DECOMPOSE_DOCKER_PROCESSES[@]}" )

_decompose-process-restart-nagios() {
  # Get the nagios container id.
  local cid;
  cid=$(docker-compose ps -q nagios-core)

  # Make sure there wasn't an error fetching nagios-core cid.
  local error_code=$?
  [ "$error_code" -gt 0 ] && \
    echo "Error occured getting nagios container id." && \
    echo "Is the nagios-core container running?" && \
    return $error_code


  # Run the verification command in container.
  docker exec $cid kill -HUP 1
}
_decompose-process-restart-nagios_help() {
  echo "  Restart nagios and reload configuration."
}

_decompose-process-verify-nagios-config() {
  # Get the nagios container id.
  local cid;
  cid=$(docker-compose ps -q nagios-core)

  # Make sure there wasn't an error fetching nagios-core cid.
  local error_code=$?
  [ "$error_code" -gt 0 ] && \
    echo "Error occured getting nagios container id." && \
    echo "Is the nagios-core container running?" && \
    return $error_code 
  
  # Run the verification command in container.
  docker exec $cid /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg
}
_decompose-process-verify-nagios-config_help() {
  echo "  Verify the current Nagios configuration."
}

_decompose-process-up() {
  docker-compose up -d
}
_decompose-process-up_help() {
  echo "  Brings up the nagios monitoring system online."
}

_decompose-process-stop() {
  docker-compose stop
}
_decompose-process-stop_help() {
  echo "  Stops the nagios monitoring system."
}

_decompose-process-build() {
  decompose-process-templates || return $?

  # Build base
  docker build ${NOCACHE:+"--no-cache"} --pull -t nagios-base -f "$(_decompose-project-root)/containers/nagios/Dockerfile.nagios-base" "$(_decompose-project-root)/containers/nagios" || return $?

  docker-compose build || return $?

  # Prepare nagios var volume
  docker-compose run -u root --rm nagios-core bash -c \
"chown nagios:nagios /usr/local/nagios/var && \
mkdir -p /usr/local/nagios/var/spool/checkresults && \
chown nagios:nagios /usr/local/nagios/var/spool && \
chown nagios:nagios /usr/local/nagios/var/spool/checkresults && \
mkdir -p /usr/local/nagios/var/{rw,rrd,archives} && \
chown nagios:nagios /usr/local/nagios/var/{rw,rrd,archives}"
  return $?
}
_decompose-process-build_help() {
  echo "  Build project"
}

_decompose-process-rebuild() {
  export NOCACHE="yes"
  _decompose-process-build
}
_decompose-process-rebuild_help() {
  echo "  Rebuild project. Does not use previously built Docker caches."
}

_decompose-process-cron() {
  echo "Rebuilding the project ..."
  decompose build
  return_code=$((return_code + $?))
  if [ $return_code -ne 0 ]; then
    echo "Return code of '$return_code' detected. Stopping Cron process."
    return $return_code
  fi
  echo "Restarting services ..."
  decompose up
  return_code=$((return_code + $?))
  if [ $return_code -ne 0 ]; then
    echo "Return code of '$return_code' detected. Stopping Cron process."
    return $return_code
  fi
  echo "Removing dangling Docker images ..."
  decompose remove-dangling-docker-images
  return_code=$((return_code + $?))

  return $return_code
}
_decompose-process-cron_help() {
  echo "  Run cron tasks"
}

# vim:syntax=sh tabstop=2 shiftwidth=2 expandtab
